//! Host binding details for use when instantiating Common Module guests
use common_bindings::{BindingsContext, BindingsContextBuilder, BindingsView};
use common_wit::InputOutput;

/// A [HostState] embodies the bindings from a host runtime to that are
/// made available to a guest Common Module or Common Script. The shape of these bindings are
/// determined by the Common WIT definitions. All traits that represent the
/// substantive implementation of a [HostState] are generated by
/// [common_bindings].
pub struct HostState<Io: InputOutput> {
    ctx: BindingsContext<Io>,
}

impl<Io> HostState<Io>
where
    Io: InputOutput,
{
    /// Instantiate the [HostState] by providing it an implementor of
    /// [InputOutput] that will be made indirectly available to the guest Common
    /// Modules that are instantiated under the [HostState].
    pub fn new(io: Io) -> Self {
        HostState {
            ctx: BindingsContextBuilder::new(io).build(),
        }
    }

    /// Return the [InputOutput] component.
    pub fn io(&self) -> &Io {
        &self.ctx.io
    }

    /// Take the [InputOutput] component, replacing
    /// the internal [InputOutput] with its default.
    pub fn take_io(&mut self) -> Io {
        std::mem::take(&mut self.ctx.io)
    }

    /// Replace[InputOutput] component, replacing
    /// the internal [InputOutput] with its default.
    pub fn replace_io(&mut self, io: Io) {
        self.ctx.io = io;
    }
}

impl<Io> BindingsView for HostState<Io>
where
    Io: InputOutput,
{
    type Io = Io;

    fn ctx(&self) -> &BindingsContext<Self::Io> {
        &self.ctx
    }

    fn ctx_mut(&mut self) -> &mut BindingsContext<Self::Io> {
        &mut self.ctx
    }
}

/// Ideally this would be derived from `BindingsView`,
/// but some challenges with our own bindings on top of
/// wasmtime-wasi's and blanket implementations.
impl<Io> common_bindings::wasi::WasiView for HostState<Io>
where
    Io: InputOutput,
{
    fn table(&mut self) -> &mut common_bindings::wasi::ResourceTable {
        &mut self.ctx.wasi_table
    }
    fn ctx(&mut self) -> &mut common_bindings::wasi::WasiCtx {
        &mut self.ctx.wasi_ctx
    }
}
