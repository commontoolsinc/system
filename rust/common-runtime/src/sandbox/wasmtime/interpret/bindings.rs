use crate::wasmtime::bindings::common_function_vm::*;

use async_trait::async_trait;
use wasmtime::component::{Resource, ResourceTable};

// NOTE: This module comes from wasmtime::component::bindgen
use common::data::types::{Reference, Value as BindingValue};
use wasmtime_wasi::{WasiCtx, WasiView};

use crate::{InputOutput, Value};

impl From<BindingValue> for Value {
    fn from(value: BindingValue) -> Self {
        match value {
            BindingValue::String(inner) => Value::String(inner),
            BindingValue::Number(inner) => Value::Number(inner),
            BindingValue::Boolean(inner) => Value::Boolean(inner),
            BindingValue::Buffer(inner) => Value::Buffer(inner),
        }
    }
}

impl From<Value> for BindingValue {
    fn from(value: Value) -> Self {
        match value {
            Value::String(inner) => BindingValue::String(inner),
            Value::Boolean(inner) => BindingValue::Boolean(inner),
            Value::Number(inner) => BindingValue::Number(inner),
            Value::Buffer(inner) => BindingValue::Buffer(inner),
        }
    }
}

#[repr(transparent)]
struct FunctionVmHostReference(String);

/// A [FunctionVmHostState] embodies the bindings from a host runtime to that are
/// made available to a guest Common Function. The shape of these bindings are
/// determined by the Common WIT definitions. All traits that represent the
/// substantive implementation of a [FunctionVmHostState] are generated by
/// [wasmtime::component::bindgen].
pub struct FunctionVmHostState<Io: InputOutput> {
    io: Io,
    references: ResourceTable,

    view_resources: ResourceTable,
    view_ctx: WasiCtx,
}

impl<Io> FunctionVmHostState<Io>
where
    Io: InputOutput,
{
    fn guest_reference_to_host_reference(
        &self,
        reference: Resource<Reference>,
    ) -> Result<&FunctionVmHostReference, String> {
        let host_resource = Resource::<FunctionVmHostReference>::new_own(reference.rep());

        self.references
            .get(&host_resource)
            .map_err(|error| format!("{error}"))
    }

    /// Instantiate the [FunctionVmHostState] by providing it an implementor of
    /// [InputOutput] that will be made indirectly available to the guest Common
    /// Modules that are instantiated under the [FunctionVmHostState].
    pub fn new(io: Io) -> Self {
        FunctionVmHostState {
            io,
            references: ResourceTable::default(),

            view_resources: ResourceTable::default(),
            view_ctx: WasiCtx::builder().inherit_stdio().build(),
        }
    }

    pub fn io(&self) -> &Io {
        &self.io
    }

    pub fn take_io(&mut self) -> Io {
        std::mem::take(&mut self.io)
    }

    pub fn replace_io(&mut self, io: Io) {
        self.io = io;
    }
}

#[async_trait]
impl<Io> common::io::state::Host for FunctionVmHostState<Io>
where
    Io: InputOutput,
{
    async fn read(&mut self, name: String) -> Option<wasmtime::component::Resource<Reference>> {
        debug!("common:io/state.read: {name}");
        self.io.read(&name)?;

        self.references
            .push(FunctionVmHostReference(name))
            .map_err(|error| error!("Unable to allocate Reference: {error}"))
            .ok()
            .map(|host_reference| Resource::new_own(host_reference.rep()))
    }

    async fn write(&mut self, name: String, value: BindingValue) -> () {
        debug!("common:io/state.write: {name}");
        self.io.write(&name, value.into());
    }
}

#[async_trait]
impl<Io> common::data::types::HostReference for FunctionVmHostState<Io>
where
    Io: InputOutput,
{
    /// Dereference a reference to a value
    /// This call is fallible (for example, if the dereference is not allowed)
    /// The value may be none (for example, if it is strictly opaque)
    async fn deref(
        &mut self,
        resource: Resource<Reference>,
    ) -> Result<Option<BindingValue>, String> {
        let FunctionVmHostReference(key) = self.guest_reference_to_host_reference(resource)?;
        Ok(self.io.read(key).map(|value| value.into()))
    }

    fn drop(&mut self, rep: Resource<Reference>) -> wasmtime::Result<()> {
        let host_resource = Resource::<FunctionVmHostReference>::new_own(rep.rep());
        self.references.delete(host_resource)?;
        Ok(())
    }

    async fn read(
        &mut self,
        _this: wasmtime::component::Resource<Reference>,
        _name: String,
    ) -> Option<wasmtime::component::Resource<Reference>> {
        todo!("Resource sub-keys not yet supported")
    }
}

impl<Io> common::data::types::Host for FunctionVmHostState<Io> where Io: InputOutput {}

#[async_trait]
impl<Io> common::function::reflect::Host for FunctionVmHostState<Io>
where
    Io: InputOutput,
{
    async fn input_keys(&mut self) -> Vec<String> {
        todo!("Input key enumeration not yet supported")
    }

    async fn output_keys(&mut self) -> Vec<String> {
        todo!("Output key enumeration not yet supported")
    }
}

impl<Io> WasiView for FunctionVmHostState<Io>
where
    Io: InputOutput,
{
    fn table(&mut self) -> &mut ResourceTable {
        &mut self.view_resources
    }

    fn ctx(&mut self) -> &mut WasiCtx {
        &mut self.view_ctx
    }
}
