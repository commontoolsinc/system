on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]

name: 'Rust'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  precheck:
    name: 'Precheck'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: ./.github/actions/nix-setup
      - uses: DeterminateSystems/flake-checker-action@main
        with:
          send-statistics: false
          ignore-missing-flake-lock: false
      - name: 'Check wit-deps'
        shell: bash
        run: |
          # Initializes the nix cache and checks `wit-deps`
          # changes have been committed.
          nix develop --command \
            ./wit/wit-tools.sh deps
          if [[ -n $(git diff .) ]]; then
            echo "Changes to wit definitions detected."
            echo "Run wit-deps before committing."
            exit 1;
          fi

  build-wasm-components:
    name: 'Build Wasm Components'
    needs: ['precheck']
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: ./.github/actions/nix-setup
      - name: 'Build Rust-based Wasm Components'
        shell: bash
        run: |
          nix build .#wasm-components
      - uses: actions/upload-artifact@v4
        with:
          name: wasm-components
          path: ./result/common-wasm-components/common_javascript_interpreter.wasm
  
  native-tests:
    name: 'Tests'
    needs: ['build-wasm-components']
    strategy:
      matrix:
        include:
          - test: 'lint'
            platform: 'ubuntu-latest'
            toolchain: 'stable'
          - test: 'doc'
            platform: 'ubuntu-latest'
            toolchain: 'stable'
          - test: 'unit'
            platform: 'ubuntu-latest'
            toolchain: 'stable'
          - test: 'integration'
            platform: 'ubuntu-latest'
            toolchain: 'stable'
          - test: 'unit'
            platform: 'ubuntu-latest'
            toolchain: 'nightly'
          - test: 'unit'
            platform: 'macos-13'
            toolchain: 'stable'
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: ./.github/actions/nix-setup
      - uses: actions/download-artifact@v4
      - name: 'Run Rust tests'
        shell: bash
        run: |
          mv ./wasm-components ./.wasm_cache
          if [ ${{ matrix.toolchain }} == "nightly" ]; then
            nix develop .#nightly --command ./scripts/ops-test ${{ matrix.test }}
          else
            nix develop --command ./scripts/ops-test ${{ matrix.test }}
          fi
        env:
          RUST_LOG: info,common_runtime=trace,common_builder=trace,common_ifc=trace
          WASM_BINDGEN_TEST_TIMEOUT: 180

  build-js:
    name: 'Build JS Packages'
    needs: ['precheck']
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@v1.10.3
      - name: Install binaries from cargo
        run: |
          cargo binstall wit-deps-cli wasm-tools --no-confirm --force
      - name: 'Setup Node/NPM'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: 'Install NPM dependencies'
        run: |
          npm install -g @bytecodealliance/jco @bytecodealliance/componentize-js@0.9.0
      - name: 'Initialize wits'
        run: |
          ./wit/wit-tools.sh deps
      - name: 'Build NPM Project'
        run: |
          cd typescript
          npm ci
          npm run build --workspaces
  
  nix-build:
    name: 'Nix build'
    needs: ['precheck']
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        include:
          - package: "runtime"
            artifact-name: "runtime"
          - package: "runtime-web"
            artifact-name: "common-runtime"
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/nix-setup
      - name: 'Run nix build'
        shell: bash
        run: |
          nix build .#${{ matrix.package }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ./result