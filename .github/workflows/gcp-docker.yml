name: GCP Docker

on:
  workflow_dispatch:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  determine_build_push:
    name: Determine images to push and/or build
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      build_all: ${{ steps.set-vars.outputs.build_all }}
      push_images: ${{ steps.set-vars.outputs.push_images }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Check if this push event is for a PR
            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls")

            PR_NUMBER=$(echo $PR_DATA | jq '.[0].number')
            echo "PR_NUMBER: $PR_NUMBER"

            PR_STATE=$(echo $PR_DATA | jq '.[0].state')
            echo "PR_STATE: $PR_STATE"

            if [[ "$PR_NUMBER" != "null" && "$PR_STATE" == "\"open\"" ]]; then
              echo "Open PR exists for this commit. Skipping push trigger."
              echo "should_run=false" >> $GITHUB_OUTPUT
            else
              echo "No open PR exists for this commit. Running workflow."
              echo "should_run=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Event is not a push. Running workflow."
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - id: set-vars
        if: steps.check.outputs.should_run == 'true'
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.event_name: ${{ github.event_name }}"

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "build_all=true" >> $GITHUB_OUTPUT
            echo "push_images=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "build_all=true" >> $GITHUB_OUTPUT
            echo "push_images=false" >> $GITHUB_OUTPUT
          else
            echo "build_all=false" >> $GITHUB_OUTPUT
            echo "push_images=false" >> $GITHUB_OUTPUT
          fi

  base:
    name: Base
    needs:
      - determine_build_push
    if: needs.determine_build_push.outputs.should_run == 'true'
    uses: ./.github/workflows/reusable-gcp-docker-build-push.yml
    with:
      image_name: base
      dockerfile: ./Dockerfile
      context: .
      push: ${{ needs.determine_build_push.outputs.push_images == 'true' }}
      build_args: |
        BASE_IMAGE=debian:bookworm-slim
      gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
      repository_path: ${{ vars.GAR_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GAR_REPOSITORY }}
    secrets:
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

  monolith:
    name: Monolith
    needs:
      - base
      - determine_build_push
    if: needs.determine_build_push.outputs.should_run == 'true'
    uses: ./.github/workflows/reusable-gcp-docker-build-push.yml
    with:
      image_name: monolith
      dockerfile: ./rust/Dockerfile
      context: .
      push: ${{ needs.determine_build_push.outputs.push_images == 'true' }}
      build_args: |
        BASE_IMAGE=${{ vars.GAR_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GAR_REPOSITORY }}/base
      gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
      repository_path: ${{ vars.GAR_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GAR_REPOSITORY }}
    secrets:
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

  runtime:
    if: needs.determine_build_push.outputs.should_run == 'true' && needs.determine_build_push.outputs.build_all == 'true'
    name: Runtime
    needs:
      - base
      - determine_build_push
    uses: ./.github/workflows/reusable-gcp-docker-build-push.yml
    with:
      image_name: runtime
      dockerfile: ./rust/Dockerfile
      context: .
      push: ${{ needs.determine_build_push.outputs.push_images == 'true' }}
      build_args: |
        BASE_IMAGE=${{ vars.GAR_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GAR_REPOSITORY }}/base
        EXECUTION_IMAGE=debian:bookworm-slim
        BINARY_PATH=target/release/runtime
        FILES=target/release/runtime
        EXPOSED_PORT=8082
      gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
      repository_path: ${{ vars.GAR_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GAR_REPOSITORY }}
    secrets:
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

  builder:
    if: needs.determine_build_push.outputs.should_run == 'true' && needs.determine_build_push.outputs.build_all == 'true'
    name: Builder
    needs:
      - base
      - determine_build_push
    uses: ./.github/workflows/reusable-gcp-docker-build-push.yml
    with:
      image_name: builder
      dockerfile: ./rust/Dockerfile
      context: .
      push: ${{ needs.determine_build_push.outputs.push_images == 'true' }}
      build_args: |
        BASE_IMAGE=${{ vars.GAR_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GAR_REPOSITORY }}/base
        EXECUTION_IMAGE=debian:bookworm-slim
        BINARY_PATH=target/release/builder
        FILES=target/release/builder
        EXPOSED_PORT=8082
      repository_path: ${{ vars.GAR_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GAR_REPOSITORY }}
      gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
    secrets:
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
